package org.cometd.bwtp.server;

import java.net.InetAddress;
import java.net.InetSocketAddress;
import java.util.concurrent.CountDownLatch;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.atomic.AtomicReference;

import org.cometd.bwtp.BWTPActionType;
import org.cometd.bwtp.BWTPChannel;
import org.cometd.bwtp.BWTPConnection;
import org.cometd.bwtp.BWTPHeaderFrame;
import org.cometd.bwtp.client.BWTPClient;
import org.cometd.wharf.ServerConnector;
import org.cometd.wharf.async.StandardAsyncServerConnector;
import org.junit.After;
import org.junit.Before;
import org.junit.Test;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;

/**
 * @version $Revision$ $Date$
 */
public class BWTPConnectionOpenTest
{
    private ExecutorService threadPool;
    private InetSocketAddress address;
    private ServerConnector serverConnector;

    @Before
    public void init() throws Exception
    {
        threadPool = Executors.newCachedThreadPool();
        address = new InetSocketAddress(InetAddress.getByName(null), 0);
    }

    @After
    public void destroy()
    {
        threadPool.shutdown();
    }

    @Test
    public void testOpen() throws Exception
    {
        final AtomicReference<BWTPConnection> connectionRef = new AtomicReference<BWTPConnection>();
        final CountDownLatch latch = new CountDownLatch(1);
        BWTPProcessor processor = new BWTPProcessor.Adapter()
        {
            @Override
            public void onConnect(BWTPConnection connection)
            {
                connectionRef.set(connection);
            }

            @Override
            public void onHeader(BWTPChannel channel, BWTPHeaderFrame frame)
            {
                if (frame.getAction() == BWTPActionType.OPENED)
                    latch.countDown();
            }
        };
        serverConnector = new StandardAsyncServerConnector(address, new BWTPServer(processor), threadPool);
        try
        {
            address = new InetSocketAddress(address.getAddress(), serverConnector.getPort());

            // Client upgrades the connection, but does not open the channel
            BWTPClient client = new BWTPClient(threadPool);
            BWTPConnection clientConnection = client.connect(address, "/", null);

            // Server opens the channels first
            BWTPConnection serverConnection = connectionRef.get();
            BWTPChannel serverChannel = serverConnection.open("", null);
            assertNotNull(serverChannel);

            int channelNumber = Integer.parseInt(serverChannel.getId());
            assertEquals(1, channelNumber % 2);

            // The client must have the channel
            BWTPChannel clientChannel = clientConnection.findChannel(serverChannel.getId());
            assertNotNull(clientChannel);

            clientChannel.close(null);
        }
        finally
        {
            serverConnector.close();
        }
    }
}
